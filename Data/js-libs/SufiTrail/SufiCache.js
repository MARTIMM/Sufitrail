/* Author: Marcel Timmerman
   License: ...
   Copyright: Â© Sufitrail 2017, 2018

   This module is generated by bin/mkCacheTileArray.pl6. Please do not
   modify because it will be overwritten in subsequent generations.
*/

// "use strict" cannot be used when goog.base() is called!;

goog.provide('SufiTrail.SufiCache');

goog.require('SufiTrail.SufiCacheData');

/** ============================================================================
  Object to cache tile and features data
  @constructor
  @extends {SufiTrail.SufiCacheData}
  @final
*/
SufiTrail.SufiCache = function ( ) {

  this.mapDirEntry = null;
  this.topDirEntry = null;
}

/** ----------------------------------------------------------------------------
  establish inheritance
*/
goog.inherits( SufiTrail.SufiCache, SufiTrail.SufiCacheData);

/** ----------------------------------------------------------------------------
  @public
  @param {SufiTrail.SufiCenter} center SufiTrail core object
*/
SufiTrail.SufiCache.prototype.init = function ( center ) {

  // call superclass init to initialize the tile data
  goog.base( this, 'init', center);

  var self = this;

  // get directory entry for the map cache
  self.center.waitUntil(
    function ( ) {

console.log('init test vars');

      return (
        !goog.isNull(self.center.SufiIO) &&
        !goog.isNull(self.center.SufiIO.urls) &&
        !goog.isNull(self.center.SufiIO.urls["topDirEntry"])
      );
    },

    function ( ) {
      self.topDirEntry = self.center.SufiIO.urls["topDirEntry"];
      self.center.SufiIO.getDirectoryPath(
        self.topDirEntry, 'cache/tiles/map', null,
        function ( mapDirEntry ) {
          self.mapDirEntry = mapDirEntry;
        },
        null
      );
    }
  );

  // subscribe to on/offline of network
  this.center.observers.subscribe( 'networkState', this, 'network');
}

/** ----------------------------------------------------------------------------
  @private
  @param {string} state network is on or off, can be wifi, none, ...
*/
SufiTrail.SufiCache.prototype.network = function ( state ) {

console.log('Network state: ' + state);

  var self = this;
  if ( state === 'wifi' ) {
    self.center.waitUntil(
      function ( ) {
console.log('network test vars');

        return (
          !goog.isNull(self.center.SufiIO) &&
          !goog.isNull(self.tileCacheInfo) &&
          !goog.isNull(self.mapDirEntry)
        );
      },

      function ( ) {
        self.startCaching();
      },

      // check every 200 ms for a max of 2 sec
      200, 3000
    );
  }
}

/** ----------------------------------------------------------------------------
*/
SufiTrail.SufiCache.prototype.startCaching = function ( ) {

//TODO timeout if there is no or slow input
  // start caching

  var self = this;

  var SufiIO = this.center.SufiIO;

//  for ( var z in self.tileCacheInfo ) {
  for ( var z=0; z<1; z++ ) {
    if ( !goog.isNull(self.tileCacheInfo[z]) ) {
console.log("zoom level: z=" + z);

      for ( var x in self.tileCacheInfo[z] ) {
        SufiIO.getDirectoryPath(
          self.mapDirEntry,
          [ z.toString(), x.toString()],
          self,
          'getTile',
          [ SufiIO, z, x]
        );
      } // for x
    }   // if
  }     // for z
}

/** ----------------------------------------------------------------------------
*/
SufiTrail.SufiCache.prototype.getTile = function (
  tileDirEntry, SufiIO, z, x
) {

  var yValues = this.tileCacheInfo[z][x];
  for ( var y = 0; y < yValues.length; y++) {
    var filename = yValues[y].toString() + '.png';
console.log( "tile dir: " + tileDirEntry.fullPath + filename);

    var target = 'http://tiles.wmflabs.org/osm-no-labels/'
        + z + '/' + x + '/' + filename;
console.log( "target url: " + target);

/* Cannot work because of cross scripting
    var xhReq = new XMLHttpRequest();
    xhReq.onreadystatechange = function ( ) {
      // this === xhReq
      if ( xhReq.readyState == 4 && xhReq.status == 200 ) {
        var serverResponse = xhReq.responseText;
        SufiIO.writeRequest( filename, serverResponse);
      }
    }

    xhReq.open( "GET", target, true);
    xhReq.send();
*/
    // See also here ath the leaflet github repo
    // github.com/Leaflet/Leaflet/blob/master/src/layer/tile/TileLayer.js
    var tileImage = document.createElement("img");
    tileImage.addEventListener(
      'load',
      function ( ) {
console.log("Image downloaded");
        var canvas = document.createElement("canvas");
        canvas.width = 256;
        canvas.height = 256;

        var ctx = canvas.getContext("2d");
        ctx.drawImage( this, 0, 0);

        SufiIO.writeFile(
          tileDirEntry, target, ctx.getImageData( 0, 0, 256, 256)
        );
      },
      false
    );

    tileImage.addEventListener(
      'error',
      function ( e ) {
console.log("Error downloading image: ", e.message);
      },
      false
    );

    tileImage.setAttribute( 'role', 'presentation');
    tileImage.setAttribute('crossorigin', 'anonymous');
    tileImage.alt = '';
    tileImage.src = target;


  }
}

/** ----------------------------------------------------------------------------
*/
