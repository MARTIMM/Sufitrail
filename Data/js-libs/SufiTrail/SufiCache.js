/* Author: Marcel Timmerman
   License: ...
   Copyright: Â© Sufitrail 2017, 2018

   This module is generated by bin/mkCacheTileArray.pl6. Please do not
   modify because it will be overwritten in subsequent generations.
*/

// "use strict" cannot be used when goog.base() is called!;

goog.provide('SufiTrail.SufiCache');

goog.require('SufiTrail.SufiCacheData');

/** ============================================================================
  Object to cache tile and features data
  @constructor
  @extends {SufiTrail.SufiCacheData}
  @final
*/
SufiTrail.SufiCache = function ( ) {

  this.mapDirEntry = null;
  this.topDirEntry = null;
}

/** ----------------------------------------------------------------------------
  establish inheritance
*/
goog.inherits( SufiTrail.SufiCache, SufiTrail.SufiCacheData);

/** ----------------------------------------------------------------------------
  @public
  @param {SufiTrail.SufiCenter} center SufiTrail core object
*/
SufiTrail.SufiCache.prototype.init = function ( center ) {

  // call superclass init to initialize the tile data
  goog.base( this, 'init', center);

  var self = this;

  // get directory entry for the map cache
  self.center.waitUntil(
    function ( ) {

console.log('init test vars');

      return (
        !goog.isNull(self.center.SufiIO) &&
        !goog.isNull(self.center.SufiIO.urls) &&
        !goog.isNull(self.center.SufiIO.urls["topDirEntry"])
      );
    },

    function ( ) {
      self.topDirEntry = self.center.SufiIO.urls["topDirEntry"];
      self.center.SufiIO.getDirectoryPath(
        self.topDirEntry, 'cache/tiles/map',
        function ( mapDirEntry ) {
          self.mapDirEntry = mapDirEntry;
        }
      );
    }
  );

  // subscribe to on/offline of network
  this.center.observers.subscribe( 'networkState', this, 'network');
}

/** ----------------------------------------------------------------------------
  @private
  @param {string} state network is on or off, can be wifi, none, ...
*/
SufiTrail.SufiCache.prototype.network = function ( state ) {

console.log('Network state: ' + state);

  var self = this;
  if ( state === 'wifi' ) {
    self.center.waitUntil(
      function ( ) {
console.log('network test vars');

        return (
          !goog.isNull(self.center.SufiIO) &&
          !goog.isNull(self.tileCacheInfo) &&
          !goog.isNull(self.mapDirEntry)
        );
      },

      function ( ) {
        self.startCaching();
      },

      // check every 200 ms for a max of 2 sec
      200, 2000
    );
  }
}

/** ----------------------------------------------------------------------------
  @private
*/
SufiTrail.SufiCache.prototype.startCaching = function ( ) {

//TODO timeout if there is no or slow input
  // start caching

  var self = this;

  var SufiIO = this.center.SufiIO;

//      for ( var z in self.tileCacheInfo ) {
  for ( var z=0; z<6; z++ ) {
    if ( !goog.isNull(self.tileCacheInfo[z]) ) {
console.log("zoom level: z=" + z);

      for ( var x in self.tileCacheInfo[z] ) {
        SufiIO.getDirectoryPath(
          self.mapDirEntry,
          [ z.toString(), x.toString()],
          function ( tileDirEntry, object ) {
            var yValues = object.tileCacheInfo[z][x];
console.log("YV: " + yValues.join(','));
            for ( var y = 0; y < yValues.length; y++) {
              var filename = yValues[y].toString() + '.png';
console.log(
"tile dir: " + tileDirEntry.fullPath + '/' + filename
);
              //SufiIO.writeRequest( filename, content, null);
            } // for y
          },  // function getYTiles
          self
        );
      }       // for x
    }         // if
    else {
console.log('Skip zoom level ' + z.toString());
    }
  }           // for z
}
